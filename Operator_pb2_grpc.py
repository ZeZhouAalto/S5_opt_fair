# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Operator_pb2 as Operator__pb2
import common_pb2 as common__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class OperatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ok = channel.unary_unary(
                '/AimsunMOD.Operator/ok',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.init = channel.unary_unary(
                '/AimsunMOD.Operator/init',
                request_serializer=Operator__pb2.InitInfo.SerializeToString,
                response_deserializer=common__pb2.CallbackTime.FromString,
                )
        self.offerAccepted = channel.unary_unary(
                '/AimsunMOD.Operator/offerAccepted',
                request_serializer=common__pb2.RequestId.SerializeToString,
                response_deserializer=common__pb2.CommandList.FromString,
                )
        self.startService = channel.unary_unary(
                '/AimsunMOD.Operator/startService',
                request_serializer=common__pb2.ServiceInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.endService = channel.unary_unary(
                '/AimsunMOD.Operator/endService',
                request_serializer=common__pb2.ServiceInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.dropService = channel.unary_unary(
                '/AimsunMOD.Operator/dropService',
                request_serializer=common__pb2.ServiceInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.rejected = channel.unary_unary(
                '/AimsunMOD.Operator/rejected',
                request_serializer=Operator__pb2.Request.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.offer = channel.unary_unary(
                '/AimsunMOD.Operator/offer',
                request_serializer=Operator__pb2.Request.SerializeToString,
                response_deserializer=Operator__pb2.OfferOrRecall.FromString,
                )
        self.finish = channel.unary_unary(
                '/AimsunMOD.Operator/finish',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.state = channel.unary_unary(
                '/AimsunMOD.Operator/state',
                request_serializer=Operator__pb2.VehicleState.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.segmentStarted = channel.unary_unary(
                '/AimsunMOD.Operator/segmentStarted',
                request_serializer=Operator__pb2.SegmentInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.segmentCompleted = channel.unary_unary(
                '/AimsunMOD.Operator/segmentCompleted',
                request_serializer=Operator__pb2.SegmentInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.calculateCandidatePathsForDRTPT = channel.unary_unary(
                '/AimsunMOD.Operator/calculateCandidatePathsForDRTPT',
                request_serializer=Operator__pb2.StopCandidates.SerializeToString,
                response_deserializer=Operator__pb2.TravelInfoCandidates.FromString,
                )
        self.reprogramFleet = channel.unary_unary(
                '/AimsunMOD.Operator/reprogramFleet',
                request_serializer=Operator__pb2.ReprogramInfo.SerializeToString,
                response_deserializer=common__pb2.FleetCommandList.FromString,
                )
        self.callback = channel.unary_unary(
                '/AimsunMOD.Operator/callback',
                request_serializer=Operator__pb2.SimulationInfo.SerializeToString,
                response_deserializer=common__pb2.CallbackTime.FromString,
                )


class OperatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ok(self, request, context):
        """! Check if the operator can be started.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init(self, request, context):
        """! The simulation will start. Pass simulation info. Receives an optional callback time to allow the operator
        to reprogram the fleet. See reprogramFleet call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def offerAccepted(self, request, context):
        """! The operator will take care of the request. It can now set/reorder the commands for the vehicle.
        If the command list is empty, the vehicle will follow the default orders.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startService(self, request, context):
        """! Notifies the operator that a vehicle is starting to service a request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def endService(self, request, context):
        """! Notifies the operator that a vehicle has ended a request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dropService(self, request, context):
        """! Notifies the operator that a vehicle has dropped a request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rejected(self, request, context):
        """! Notifies the operator that the offer was rejected, the customer not use this service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def offer(self, request, context):
        """! Returns an offer for a request. If the operator can not make an offer, it can return the reason as:
        - gRPC Error Status code:
        - grpc::StatusCode::RESOURCE_EXHAUSTED: no vehicle available
        - grpc::StatusCode::NOT_FOUND: no path available
        - any other gRPC Status Code: unspecified error
        - gRPC OK Status code and empty offer:
        - No offer made (vehicles and path are ok but it cannot be served for operational reasons)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish(self, request, context):
        """! The simulation has ended (or has been cancelled)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def state(self, request, context):
        """! Notifies the operator of a vehicle's state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def segmentStarted(self, request, context):
        """! A segment has been started
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def segmentCompleted(self, request, context):
        """! A segment has been completed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calculateCandidatePathsForDRTPT(self, request, context):
        """! The simulator ask the operator to give a set of candidate paths from one starting point to many Transit Stops.
        The answer must have a path for each stop candidate (or at least, an empty path).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reprogramFleet(self, request, context):
        """! The simulator ask the operator to, optionally, reprogram vehicles (one, severall, all) in the fleet.
        The answer can have also an optional callback time to allow the operator to reprogram the fleet again later on.

        This method will be deprecated, use Simulator.reprogramFleet instead for reprogram and the callback method to
        get callbacks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def callback(self, request, context):
        """! The operator is called as a callback registered in the init method or
        as a result of this call.

        Returns the next callback time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ok': grpc.unary_unary_rpc_method_handler(
                    servicer.ok,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=Operator__pb2.InitInfo.FromString,
                    response_serializer=common__pb2.CallbackTime.SerializeToString,
            ),
            'offerAccepted': grpc.unary_unary_rpc_method_handler(
                    servicer.offerAccepted,
                    request_deserializer=common__pb2.RequestId.FromString,
                    response_serializer=common__pb2.CommandList.SerializeToString,
            ),
            'startService': grpc.unary_unary_rpc_method_handler(
                    servicer.startService,
                    request_deserializer=common__pb2.ServiceInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'endService': grpc.unary_unary_rpc_method_handler(
                    servicer.endService,
                    request_deserializer=common__pb2.ServiceInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'dropService': grpc.unary_unary_rpc_method_handler(
                    servicer.dropService,
                    request_deserializer=common__pb2.ServiceInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'rejected': grpc.unary_unary_rpc_method_handler(
                    servicer.rejected,
                    request_deserializer=Operator__pb2.Request.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'offer': grpc.unary_unary_rpc_method_handler(
                    servicer.offer,
                    request_deserializer=Operator__pb2.Request.FromString,
                    response_serializer=Operator__pb2.OfferOrRecall.SerializeToString,
            ),
            'finish': grpc.unary_unary_rpc_method_handler(
                    servicer.finish,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'state': grpc.unary_unary_rpc_method_handler(
                    servicer.state,
                    request_deserializer=Operator__pb2.VehicleState.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'segmentStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.segmentStarted,
                    request_deserializer=Operator__pb2.SegmentInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'segmentCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.segmentCompleted,
                    request_deserializer=Operator__pb2.SegmentInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'calculateCandidatePathsForDRTPT': grpc.unary_unary_rpc_method_handler(
                    servicer.calculateCandidatePathsForDRTPT,
                    request_deserializer=Operator__pb2.StopCandidates.FromString,
                    response_serializer=Operator__pb2.TravelInfoCandidates.SerializeToString,
            ),
            'reprogramFleet': grpc.unary_unary_rpc_method_handler(
                    servicer.reprogramFleet,
                    request_deserializer=Operator__pb2.ReprogramInfo.FromString,
                    response_serializer=common__pb2.FleetCommandList.SerializeToString,
            ),
            'callback': grpc.unary_unary_rpc_method_handler(
                    servicer.callback,
                    request_deserializer=Operator__pb2.SimulationInfo.FromString,
                    response_serializer=common__pb2.CallbackTime.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AimsunMOD.Operator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Operator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ok(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/ok',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/init',
            Operator__pb2.InitInfo.SerializeToString,
            common__pb2.CallbackTime.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def offerAccepted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/offerAccepted',
            common__pb2.RequestId.SerializeToString,
            common__pb2.CommandList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/startService',
            common__pb2.ServiceInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def endService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/endService',
            common__pb2.ServiceInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dropService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/dropService',
            common__pb2.ServiceInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rejected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/rejected',
            Operator__pb2.Request.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def offer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/offer',
            Operator__pb2.Request.SerializeToString,
            Operator__pb2.OfferOrRecall.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/finish',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/state',
            Operator__pb2.VehicleState.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def segmentStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/segmentStarted',
            Operator__pb2.SegmentInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def segmentCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/segmentCompleted',
            Operator__pb2.SegmentInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def calculateCandidatePathsForDRTPT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/calculateCandidatePathsForDRTPT',
            Operator__pb2.StopCandidates.SerializeToString,
            Operator__pb2.TravelInfoCandidates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reprogramFleet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/reprogramFleet',
            Operator__pb2.ReprogramInfo.SerializeToString,
            common__pb2.FleetCommandList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def callback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AimsunMOD.Operator/callback',
            Operator__pb2.SimulationInfo.SerializeToString,
            common__pb2.CallbackTime.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
